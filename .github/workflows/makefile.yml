# Copyright Antti Kultanen <antti.kultanen@molukki.com>
# nflog_dns is licensed under GNU GPL v2 or later; see LICENSE file

name: Build nflog_dns

on:
  workflow_dispatch:
  push:
    branches:
    - '**'
    tags:
      - 'v*.*.*'
  schedule:
    - cron: "37 13 * * *"

jobs:
  # Do integration testing, requires full VM
  ubuntu-full:
    name: Ubuntu 24.04 compile and test suite
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install build and test dependencies
      run: |
        sudo rm -f /var/lib/man-db/auto-update
        sudo apt-get update
        sudo apt-get -y --no-install-recommends install libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential clang-tidy

    - name: Run clang-tidy
      run: clang-tidy nflog_dns.cpp -- -std=c++11 -I/usr/include/libnetfilter_log

    - name: Compile binary
      run: make

    - name: Run tests
      run: sudo make test

    - name: Verify installation
      run: sudo make install

  # Build packages, uses containers
  containers:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Debian 13
            image: debian:13
            pkgtype: deb
            install: apt-get update && apt-get -y --no-install-recommends install ca-certificates libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential debhelper-compat lsb-release
          - name: Debian 12
            image: debian:12
            pkgtype: deb
            install: apt-get update && apt-get -y --no-install-recommends  install ca-certificates libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential debhelper-compat lsb-release

          - name: Fedora 42
            image: fedora:42
            pkgtype: rpm
            install: dnf install -y gcc-c++ make libpcap-devel libtins-devel libnetfilter_log-devel spdlog-devel python3 rpm-build rpmdevtools rpmlint
          - name: Fedora 41
            image: fedora:41
            pkgtype: rpm
            install: dnf install -y gcc-c++ make libpcap-devel libtins-devel libnetfilter_log-devel spdlog-devel python3 rpm-build rpmdevtools rpmlint

          - name: openSUSE Leap 15.6
            image: opensuse/leap:15.6
            pkgtype: rpm
            install: |
              zypper -n ref
              zypper -n in gcc-c++ make libpcap-devel libtins-devel libnetfilter_log-devel spdlog-devel fmt-devel python3 rpm-build rpmdevtools rpmlint
          - name: openSUSE Tumbleweed
            image: opensuse/tumbleweed
            pkgtype: rpm
            install: |
              zypper -n ref
              zypper -n in gcc-c++ make libpcap-devel libtins-devel libnetfilter_log-devel spdlog-devel fmt-devel python3 rpm-build rpmdevtools rpmlint

          - name: Ubuntu 24.04
            image: ubuntu:24.04
            pkgtype: deb
            install: apt-get update && apt-get -y --no-install-recommends install ca-certificates libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential debhelper-compat lsb-release
          - name: Ubuntu 22.04
            image: ubuntu:22.04
            pkgtype: deb
            install: apt-get update && apt-get -y --no-install-recommends install ca-certificates libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential debhelper-compat lsb-release

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}

    name: ${{ matrix.name }} build

    steps:
    - name: Install dependencies
      run: ${{ matrix.install }}

    - uses: actions/checkout@v4

    - name: Inject distribution into package version
      run: |
        case "${{ matrix.pkgtype }}" in
        "deb")
          CODENAME="$(lsb_release -c -s)"
          FULL_VERSION="$(dpkg-parsechangelog --show-field Version)"
          NEW_VERSION="${FULL_VERSION}+${CODENAME}1"
          PACKAGE="$(dpkg-parsechangelog --show-field Source)"
          sed -i "1s/^.*$/${PACKAGE} (${NEW_VERSION}) ${CODENAME}; urgency=medium/" "debian/changelog"
          echo "DEB package version: ${NEW_VERSION}"
          ;;
        "rpm")
          if grep -q "opensuse" "/etc/os-release"
          then
            RELEASE="$(grep '^ID=' "/etc/os-release" | cut -d '=' -f 2 | tr -d '"')"
            RELEASE="${RELEASE##*-}"
            VERSION_ID="$(grep '^VERSION_ID=' "/etc/os-release" | cut -d '=' -f 2 | tr -d '"' | tr -d '.')"
            FULLRELEASE="${RELEASE}${VERSION_ID}"
            sed -i "s/^Release:.*/Release:        1.${FULLRELEASE}/" "nflog_dns.spec"
            NOW="$(date '+%a %b %d %Y')"
            VERSION="$(grep '^Version:' nflog_dns.spec | awk '{print $2}')"
            PACKAGER="GitHub Actions <ci@molukki.com>"

            awk -v rel="${FULLRELEASE}" -v ver="${VERSION}" -v date="${NOW}" \
                -v packager="${PACKAGER}" -v release="${RELEASE}" -v version_id="${VERSION_ID}" '
                /^%changelog/ {
                    print;
                    print "* " date " " packager " - " ver "-" rel;
                    print "- Automated RPM build for openSUSE " release " " version_id "\n";
                    next
                }
                { print }
            ' nflog_dns.spec > nflog_dns.spec.tmp && mv nflog_dns.spec.tmp nflog_dns.spec
            echo "OpenSUSE RPM release: ${FULLRELEASE}"
          else
            echo "No changes"
          fi
          ;;
        *)
          echo "Error: unknown pkgtype" >&2
          exit 1
          ;;
        esac

    - name: Fix RPM package dependencies for openSUSE
      run: |
        if grep -q "opensuse" "/etc/os-release"
        then
          PKGNAME="$(rpm -qa 'libtins*' --qf '%{NAME}\n' | head -1)"
          sed -i "s/^Requires: *libtins/Requires:       ${PKGNAME}/" nflog_dns.spec
          PKGNAME="$(rpm -qa 'libnetfilter_log*' --qf '%{NAME}\n' | head -1)"
          sed -i "s/^Requires: *libnetfilter_log/Requires:       ${PKGNAME}/" nflog_dns.spec
          PKGNAME="$(rpm -qa 'libspdlog*' --qf '%{NAME}\n' | head -1)"
          sed -i "s/^Requires: *spdlog/Requires:       ${PKGNAME}/" nflog_dns.spec
          PKGNAME="$(rpm -qa 'libpcap*' --qf '%{NAME}\n' | head -1)"
          sed -i "s/^Requires: *libpcap/Requires:       ${PKGNAME}/" nflog_dns.spec
          PKGNAME="$(rpm -qa 'libfmt*' --qf '%{NAME}\n' | head -1)"
          sed -i "s/^Requires: *fmt/Requires:       ${PKGNAME}/" nflog_dns.spec
        fi

    - name: Build package
      run: |
        mkdir -p artifacts
        case "${{ matrix.pkgtype }}" in
        "deb")
          make deb
          cp -v ../*.deb artifacts/
          ;;
        "rpm")
          make rpm
          cp -v ${HOME}/rpmbuild/RPMS/x86_64/*.rpm artifacts/
          ;;
        *)
          echo "Error: unknown pkgtype" >&2
          exit 1
          ;;
        esac

    - name: Verify DEB package installation
      if: ${{ matrix.pkgtype == 'deb' }}
      run: |
        dpkg -i artifacts/*.deb

    - name: Verify DEB package removal
      if: ${{ matrix.pkgtype == 'deb' }}
      run: |
        dpkg -r nflog-dns

    - name: Verify RPM package installation
      if: ${{ matrix.pkgtype == 'rpm' }}
      run: |
        rpm -i artifacts/*.rpm

    - name: Verify RPM package removal
      if: ${{ matrix.pkgtype == 'rpm' }}
      run: |
        rpm -e nflog-dns

    - name: Upload DEB package
      if: ${{ matrix.pkgtype == 'deb' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule') }}
      uses: actions/upload-artifact@v4
      continue-on-error: false
      with:
        name: nflog_dns ${{ matrix.name }} amd64 deb
        path: |
          artifacts/*.deb
    - name: Upload RPM package
      if: ${{ matrix.pkgtype == 'rpm' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule') }}
      uses: actions/upload-artifact@v4
      continue-on-error: false
      with:
        name: nflog_dns ${{ matrix.name }} x86_64 rpm
        path: |
          artifacts/*.rpm

  # Build Devuan packages, uses chroot
  chroot:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Devuan 5.0
            release: daedalus
#          - name: Devuan 4.0
#            release: chimaera

    runs-on: self-hosted
    name: ${{ matrix.name }} build
    steps:
      - uses: actions/checkout@v4

      - name: Debootstrap ${{ matrix.name }}
        run: sudo debootstrap --variant=minbase --cache-dir=/var/cache/debootstrap ${{ matrix.release }} ../devuan-${{ matrix.release }} http://deb.devuan.org/merged

      - name: Install build dependencies
        run: |
          echo 'echo Acquire::http::proxy "http://10.0.0.1:9999"\; | tee /etc/apt/apt.conf.d/02proxy' | sudo chroot ../devuan-${{ matrix.release }} /bin/sh
          cat ../devuan-${{ matrix.release }}/etc/apt/apt.conf.d/02proxy
          sudo chroot ../devuan-${{ matrix.release }} apt-get update
          sudo chroot ../devuan-${{ matrix.release }} apt-get -y --no-install-recommends install ca-certificates libtins-dev libnetfilter-log-dev libspdlog-dev python3 build-essential debhelper-compat lsb-release

      - name: Inject distribution into package version
        run: |
          FULL_VERSION="$(dpkg-parsechangelog --show-field Version)"
          NEW_VERSION="${FULL_VERSION}+${{ matrix.release }}1"
          PACKAGE="$(dpkg-parsechangelog --show-field Source)"
          sed -i "1s/^.*$/${PACKAGE} (${NEW_VERSION}) ${{ matrix.release }}; urgency=medium/" "debian/changelog"
          echo "DEB package version: ${NEW_VERSION}"

      - name: Bind mount checkout to chroot
        run: |
          mkdir -p ../devuan-${{ matrix.release }}/tmp/nflog_dns-build/nflog_dns
          sudo mount -o bind . ../devuan-${{ matrix.release }}/tmp/nflog_dns-build/nflog_dns

      - name: Build package
        run: |
          echo 'cd /tmp/nflog_dns-build/nflog_dns && make deb' | sudo chroot ../devuan-${{ matrix.release }} /bin/sh
          mkdir -p artifacts
          cp -v ../devuan-${{ matrix.release }}/tmp/nflog_dns-build/*.deb artifacts/

      - name: Remove bind mount
        run: sudo umount ../devuan-${{ matrix.release }}/tmp/nflog_dns-build/nflog_dns

      - name: Verify DEB package installation
        run: echo 'dpkg -i /tmp/nflog_dns-build/*.deb' | sudo chroot ../devuan-${{ matrix.release }} /bin/sh

      - name: Verify DEB package removal
        run: sudo chroot ../devuan-${{ matrix.release }} dpkg -r nflog_dns

      - name: Cleanup chroot
        run: sudo chroot ../devuan-${{ matrix.release }} rm -rf /tmp/nflog_dns-build/nflog_dns/debian

      - name: Upload DEB package
        if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule')
        uses: actions/upload-artifact@v4
        continue-on-error: false
        with:
          name: nflog_dns ${{ matrix.name }} amd64 deb
          path: |
            artifacts/*.deb

      - name: Clean Up Workspace
        if: always()
        run: |
          sudo umount ../devuan-${{ matrix.release }}/tmp/nflog_dns-build/nflog_dns || true
          echo sudo rm -rf "../devuan-${{ matrix.release }}"
          rm -rf "${{ github.workspace }}"

  # Build Raspberry Pi OS packages, uses QEMU
  qemu:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Raspberry Pi OS 13
            image: debian:13
          - name: Raspberry Pi OS 12
            image: debian:12

    runs-on: ubuntu-latest
    name: ${{ matrix.name }} build
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install host dependencies
        run: |
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get update
          sudo apt-get -y --no-install-recommends install qemu-user-static binfmt-support ca-certificates

      - name: Build Raspberry Pi ${{ matrix.name }} package
        run: |
          mkdir -p artifacts
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/src -w /src ${{ matrix.image }} \
            bash -c "apt-get update \
              && apt-get -y --no-install-recommends install \
                ca-certificates git libtins-dev libnetfilter-log-dev libspdlog-dev \
                python3 build-essential debhelper-compat lsb-release \
              && CODENAME=\$(lsb_release -c -s) \
              && FULL_VERSION=\$(dpkg-parsechangelog --show-field Version) \
              && PACKAGE=\$(dpkg-parsechangelog --show-field Source) \
              && NEW_VERSION=\${FULL_VERSION}+\${CODENAME}1 \
              && sed -i \"1s/^.*\$/\${PACKAGE} (\${NEW_VERSION}) \${CODENAME}; urgency=medium/\" debian/changelog \
              && echo Building for \${CODENAME} \(arm64\) \
              && make deb \
              && cp -v ../*.deb /src/artifacts/"

      - name: Upload DEB package
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        continue-on-error: false
        with:
          name: nflog_dns ${{ matrix.name }} arm64 deb
          path: |
            artifacts/*.deb

  create-release:
    name: Create GitHub Release
    needs: [ubuntu-full, containers, chroot, qemu]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
